--------------------------------------------------------------
Fibonacci
--------------------------------------------------------------
def fibo(num):
    out,a,b = 0,1,1
    o=[]
    while out <=num:
        out=a+b
        #print(out)
        a=b
        #print(a)
        b=out
        #print(b)
        o.append(out)
        #print('loop')
    return o    
--------------------------------------------------------------
Prime numbers
--------------------------------------------------------------       
def prime(num):
    o =[]
    i = 2
    while i < num:
        if num % i == 0:
            print ('not prime')
            break
        i+=1
    else:
        print('prime')
     

    return(0)
--------------------------------------------------------------
Return the "centered" average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.


centered_average([1, 2, 3, 4, 100]) → 3
centered_average([1, 1, 5, 5, 10, 8, 7]) → 5
centered_average([-10, -4, -2, -4, -2, 0]) → -3
-------------------------------------------------------------
def centered_average(nums):
  nums.remove(max(nums))
  nums.remove(min(nums))
  return sum(nums)/len(nums)
  
--------------------------------------------------------------
Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

last2('hixxhi') → 1
last2('xaxxaxaxx') → 1
last2('axxxaaxx') → 2
--------------------------------------------------------------   
def last2(str):
  last2 = str[-2:]
  cnt=0
  for i in range(len(str)):
      print(last2 +'--'+ str[i:i+2])
      if last2 == str[i:i+2]:
          cnt += 1
  return cnt-1
--------------------------------------------------------------

Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.


sum13([1, 2, 2, 1]) → 6
sum13([1, 1]) → 2
sum13([1, 2, 2, 1, 13]) → 6
--------------------------------------------------------------   
def sum13(nums):
  cnt = 0
  skip = 0
  for i in nums:

   if skip == 1:
        skip=0
        continue
   
   if i == 13:
        skip = 1
        continue
     
   else:
      cnt+= i

  return cnt  
--------------------------------------------------------------

Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.


sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4
--------------------------------------------------------------    
def sum67(nums):
  skip = False
  cnt = 0
  for i in nums:
    print("i:"+str(i))
    if i == 7:
      skip = False
      print('7' + str(skip))
      continue
    elif skip == True:
      print('skip:'+str(skip))
      continue
     
    if i ==6 :
      skip = True
      print('6' + str(skip))
      continue
    else:
      cnt+=i
      print(cnt)
  return cnt  
--------------------------------------------------------------

Given an array of ints, return True if the array contains a 2 next to a 2 somewhere.


has22([1, 2, 2]) → True
has22([1, 2, 1, 2]) → False
has22([2, 1, 2]) → False
--------------------------------------------------------------   
def has22(nums):
  i=0
  while i < (len(nums)-1) :
    if nums[i]==nums[i+1]==2:
      return True
    i+=1  
  else :
    return False
--------------------------------------------------------------

Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: s.lower() returns the lowercase version of a string.


end_other('Hiabc', 'abc') → True
end_other('AbC', 'HiaBc') → True
end_other('abc', 'abXabc') → True
-----------------------------------------------------------------
def end_other(a, b):
  
  if a.lower().endswith(b.lower()) or b.lower().endswith(a.lower()):
    return True
  else:
    return False
--------------------------------------------------------------
Drivers
--------------------------------------------------------------     
#print(has22([1, 1, 2]))    
#print(sum67([1, 1, 6, 7, 2]))
#print(sum13([13, 1, 2, 13, 2, 1, 13]))  
#print(last2('xaxaxaxx'))
#print(fibo(5))        
#print(prime(7))

